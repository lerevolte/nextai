<?php

namespace App\Console\Commands;

use App\Models\CrmIntegration;
use App\Models\Conversation;
use App\Services\CRM\Providers\AmoCRMProvider;
use Illuminate\Console\Command;

class TestAmoCRM extends Command
{
    protected $signature = 'amocrm:test 
                            {integration_id : ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AmoCRM}
                            {--action=info : –î–µ–π—Å—Ç–≤–∏–µ (info|pipelines|users|test-connection|create-lead|create-contact)}
                            {--conversation= : ID conversation –¥–ª—è —Ç–µ—Å—Ç–æ–≤}
                            {--pipeline= : ID –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤}
                            {--status= : ID —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤}';

    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏';

    public function handle()
    {
        $integrationId = $this->argument('integration_id');
        $action = $this->option('action');

        $integration = CrmIntegration::find($integrationId);

        if (!$integration) {
            $this->error("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è #{$integrationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return 1;
        }

        if ($integration->type !== 'amocrm') {
            $this->error("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è #{$integrationId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è AmoCRM");
            return 1;
        }

        $this->info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {$integration->name}");
        $this->newLine();

        try {
            $provider = new AmoCRMProvider($integration);

            switch ($action) {
                case 'info':
                    $this->showInfo($integration, $provider);
                    break;

                case 'test-connection':
                    $this->testConnection($provider);
                    break;

                case 'pipelines':
                    $this->showPipelines($provider);
                    break;

                case 'users':
                    $this->showUsers($provider);
                    break;

                case 'create-lead':
                    $this->testCreateLead($provider, $integration);
                    break;

                case 'create-contact':
                    $this->testCreateContact($provider);
                    break;

                default:
                    $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {$action}");
                    $this->info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: info, test-connection, pipelines, users, create-lead, create-contact");
                    return 1;
            }

            return 0;

        } catch (\Exception $e) {
            $this->error("–û—à–∏–±–∫–∞: " . $e->getMessage());
            $this->error("Trace: " . $e->getTraceAsString());
            return 1;
        }
    }

    protected function showInfo(CrmIntegration $integration, AmoCRMProvider $provider)
    {
        $credentials = $integration->credentials ?? [];
        $settings = $integration->settings ?? [];

        $this->info("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:");
        $this->table(
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['ID', $integration->id],
                ['–ù–∞–∑–≤–∞–Ω–∏–µ', $integration->name],
                ['–ü–æ–¥–¥–æ–º–µ–Ω', $credentials['subdomain'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'],
                ['Client ID', $credentials['client_id'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'],
                ['–ï—Å—Ç—å Access Token', !empty($credentials['access_token']) ? '‚úì' : '‚úó'],
                ['–ï—Å—Ç—å Refresh Token', !empty($credentials['refresh_token']) ? '‚úì' : '‚úó'],
                ['Pipeline ID', $settings['default_pipeline_id'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω ‚ùå'],
                ['Status ID', $settings['default_status_id'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω ‚ùå'],
                ['Responsible User ID', $settings['default_responsible_id'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'],
                ['–ê–∫—Ç–∏–≤–Ω–∞', $integration->is_active ? '‚úì' : '‚úó'],
            ]
        );

        if (empty($settings['default_pipeline_id'])) {
            $this->warn("‚ö†Ô∏è  Pipeline ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.");
        }

        if (empty($settings['default_status_id'])) {
            $this->warn("‚ö†Ô∏è  Status ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.");
        }
    }

    protected function testConnection(AmoCRMProvider $provider)
    {
        $this->info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
        
        if ($provider->testConnection()) {
            $this->info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
        } else {
            $this->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AmoCRM");
        }
    }

    protected function showPipelines(AmoCRMProvider $provider)
    {
        $this->info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫...");
        
        $pipelines = $provider->getPipelines();

        if (empty($pipelines)) {
            $this->warn("–í–æ—Ä–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        foreach ($pipelines as $pipeline) {
            $this->info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
            $this->info("üéØ –í–æ—Ä–æ–Ω–∫–∞: {$pipeline['name']}");
            $this->info("   ID: {$pipeline['id']}");
            
            $stages = $provider->getPipelineStages($pipeline['id']);
            
            if (!empty($stages)) {
                $this->info("   –≠—Ç–∞–ø—ã:");
                foreach ($stages as $stage) {
                    $this->line("   ‚Ä¢ {$stage['name']} (ID: {$stage['id']})");
                }
            }
            $this->newLine();
        }

        $this->info("üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏, –¥–æ–±–∞–≤—å—Ç–µ –≤ settings –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:");
        $this->line("   'default_pipeline_id' => {ID –≤–æ—Ä–æ–Ω–∫–∏}");
        $this->line("   'default_status_id' => {ID –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞}");
    }

    protected function showUsers(AmoCRMProvider $provider)
    {
        $this->info("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
        
        $users = $provider->getUsers();

        if (empty($users)) {
            $this->warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        $tableData = [];
        foreach ($users as $user) {
            $tableData[] = [
                $user['id'],
                $user['name'] ?? 'N/A',
                $user['email'] ?? 'N/A',
            ];
        }

        $this->table(['ID', '–ò–º—è', 'Email'], $tableData);
    }

    protected function testCreateLead(AmoCRMProvider $provider, CrmIntegration $integration)
    {
        $conversationId = $this->option('conversation');
        
        if (!$conversationId) {
            $this->error("–£–∫–∞–∂–∏—Ç–µ --conversation=ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞");
            return;
        }

        $conversation = Conversation::find($conversationId);
        
        if (!$conversation) {
            $this->error("Conversation #{$conversationId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        $this->info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞ –∏–∑ conversation #{$conversationId}...");
        $this->newLine();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        $settings = $integration->settings ?? [];
        
        $this->info("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:");
        $this->table(
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['Pipeline ID', $settings['default_pipeline_id'] ?? '‚ùå –ù–ï –£–ö–ê–ó–ê–ù'],
                ['Status ID', $settings['default_status_id'] ?? '‚ùå –ù–ï –£–ö–ê–ó–ê–ù'],
                ['User Name', $conversation->user_name ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'],
                ['User Email', $conversation->user_email ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'],
                ['User Phone', $conversation->user_phone ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'],
            ]
        );
        $this->newLine();

        if (empty($settings['default_pipeline_id'])) {
            $this->error("‚ùå Pipeline ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑:");
            $this->line("   php artisan amocrm:test {$integration->id} --action=pipelines");
            return;
        }

        if (empty($settings['default_status_id'])) {
            $this->error("‚ùå Status ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
            return;
        }

        if (!$this->confirm('–°–æ–∑–¥–∞—Ç—å –ª–∏–¥ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?', true)) {
            $this->info("–û—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }

        try {
            $result = $provider->createDeal($conversation);

            $this->info("‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
            $this->table(
                ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                [
                    ['Lead ID', $result['lead_id'] ?? 'N/A'],
                    ['Contact ID', $result['contact_id'] ?? 'N/A'],
                ]
            );

            if (isset($result['lead_id'])) {
                $leadUrl = "https://{$integration->credentials['subdomain']}.amocrm.ru/leads/detail/{$result['lead_id']}";
                $this->info("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏–¥: {$leadUrl}");
            }

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞:");
            $this->error($e->getMessage());
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É –æ—Ç AmoCRM
            if (strpos($e->getMessage(), 'validation-errors') !== false) {
                $this->newLine();
                $this->warn("üí° –≠—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç AmoCRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:");
                $this->line("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Pipeline ID –∏ Status ID");
                $this->line("   2. –ß—Ç–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ");
                $this->line("   3. –ß—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–æ–≤");
                $this->newLine();
                $this->line("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ—Ä–æ–Ω–æ–∫:");
                $this->line("   php artisan amocrm:test {$integration->id} --action=pipelines");
            }
        }
    }

    protected function testCreateContact(AmoCRMProvider $provider)
    {
        $this->info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞...");

        $name = $this->ask('–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞', '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç');
        $email = $this->ask('Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', 'test@example.com');
        $phone = $this->ask('–¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', '+79991234567');

        $contactData = [
            'name' => $name,
        ];

        if ($email) {
            $contactData['email'] = $email;
        }

        if ($phone) {
            $contactData['phone'] = $phone;
        }

        try {
            $result = $provider->syncContact($contactData);

            $this->info("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω!");
            $this->table(
                ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                [
                    ['Contact ID', $result['id'] ?? 'N/A'],
                    ['Action', $result['action'] ?? 'N/A'],
                ]
            );

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:");
            $this->error($e->getMessage());
        }
    }
}