<?php

namespace App\Services\Actions;

use App\Models\Conversation;
use App\Models\FunctionAction;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;

class ComplexActionExecutor
{
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
     */
    public function getOrderStatus(FunctionAction $action, array $params): array
    {
        $orderId = $params['order_id'] ?? null;
        
        if (!$orderId) {
            throw new \Exception('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ API
        $order = DB::table('orders')
            ->where('id', $orderId)
            ->orWhere('number', $orderId)
            ->first();
            
        if (!$order) {
            return [
                'success' => false,
                'error' => "–ó–∞–∫–∞–∑ {$orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            ];
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        $delivery = DB::table('deliveries')
            ->where('order_id', $order->id)
            ->first();
            
        return [
            'success' => true,
            'data' => [
                'order_id' => $order->number,
                'status' => $this->translateStatus($order->status),
                'status_code' => $order->status,
                'created_at' => $order->created_at,
                'total' => $order->total,
                'delivery_date' => $delivery->estimated_date ?? '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è',
                'tracking_number' => $delivery->tracking_number ?? null,
                'items_count' => DB::table('order_items')
                    ->where('order_id', $order->id)
                    ->count(),
            ]
        ];
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
     */
    public function checkAvailability(FunctionAction $action, array $params): array
    {
        $date = $params['date'] ?? null;
        $time = $params['time'] ?? null;
        $service = $params['service'] ?? null;
        $specialist = $params['specialist'] ?? null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å
        $isBooked = DB::table('appointments')
            ->where('date', $date)
            ->where('time', $time)
            ->when($specialist, function ($query, $specialist) {
                return $query->where('specialist_id', $specialist);
            })
            ->exists();
            
        if ($isBooked) {
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
            $alternatives = $this->findAlternativeSlots($date, $time, $specialist);
            
            return [
                'success' => false,
                'available' => false,
                'alternatives' => $alternatives,
                'message' => '–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ' . 
                            implode(', ', array_column($alternatives, 'time'))
            ];
        }
        
        return [
            'success' => true,
            'available' => true,
            'message' => '–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏'
        ];
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
     */
    public function calculatePrice(FunctionAction $action, array $params): array
    {
        $product = $params['product'] ?? null;
        $quantity = $params['quantity'] ?? 1;
        $options = $params['options'] ?? [];
        
        // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        $basePrice = $this->getBasePrice($product);
        
        if (!$basePrice) {
            return [
                'success' => false,
                'error' => '–¢–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            ];
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –æ–ø—Ü–∏–π
        $optionsPrice = 0;
        $includes = [];
        
        foreach ($options as $option) {
            $optionData = $this->getOptionPrice($option);
            if ($optionData) {
                $optionsPrice += $optionData['price'];
                $includes[] = $optionData['name'];
            }
        }
        
        $total = ($basePrice + $optionsPrice) * $quantity;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏
        $discount = $this->calculateDiscount($total, $params);
        $finalPrice = $total - $discount;
        
        return [
            'success' => true,
            'data' => [
                'product' => $product,
                'quantity' => $quantity,
                'base_price' => $basePrice,
                'options_price' => $optionsPrice,
                'subtotal' => $total,
                'discount' => $discount,
                'price' => $finalPrice,
                'includes' => implode(', ', $includes),
                'duration' => $this->getEstimatedDuration($product, $options),
                'currency' => '—Ä—É–±.'
            ]
        ];
    }
    
    /**
     * –ü–µ—Ä–µ–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
     */
    public function transferToOperator(FunctionAction $action, array $params, Conversation $conversation): array
    {
        $priority = $action->config['priority'] ?? 'normal';
        $department = $action->config['department'] ?? 'general';
        $reason = $params['reason'] ?? '–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞';
        
        // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞
        $conversation->update([
            'status' => 'waiting_operator',
            'metadata' => array_merge($conversation->metadata ?? [], [
                'transfer_reason' => $reason,
                'transfer_priority' => $priority,
                'transfer_department' => $department,
                'transferred_at' => now()->toIso8601String(),
            ])
        ]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        $this->notifyOperators($conversation, $priority, $department);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ CRM –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if ($action->config['create_task'] ?? false) {
            $this->createOperatorTask($conversation, $reason, $priority);
        }
        
        return [
            'success' => true,
            'data' => [
                'status' => 'transferred',
                'priority' => $priority,
                'department' => $department,
                'estimated_wait' => $this->getEstimatedWaitTime($priority, $department),
            ]
        ];
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
     */
    public function analyzeSentiment(FunctionAction $action, array $params, Conversation $conversation): array
    {
        $text = $params['complaint_text'] ?? $params['message'] ?? '';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        $sentiment = app(AIService::class)->analyzeSentiment($text);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        $severity = 'low';
        if ($sentiment['score'] < -0.5) {
            $severity = 'high';
        } elseif ($sentiment['score'] < -0.2) {
            $severity = 'medium';
        }
        
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º—ã
        $keywords = $this->extractProblemKeywords($text);
        
        return [
            'success' => true,
            'data' => [
                'sentiment' => $sentiment['label'], // positive/negative/neutral
                'score' => $sentiment['score'], // -1 to 1
                'severity' => $severity,
                'keywords' => $keywords,
                'requires_attention' => $severity === 'high',
                'suggested_actions' => $this->suggestActions($sentiment, $keywords),
            ]
        ];
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private function translateStatus(string $status): string
    {
        $statuses = [
            'pending' => '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'confirmed' => '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'processing' => '‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            'shipped' => 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'delivered' => 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled' => '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            'refunded' => 'üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω',
        ];
        
        return $statuses[$status] ?? $status;
    }
    
    private function findAlternativeSlots($date, $time, $specialist): array
    {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        $slots = [];
        $baseTime = \Carbon\Carbon::parse("$date $time");
        
        for ($i = -2; $i <= 2; $i++) {
            if ($i === 0) continue;
            
            $checkTime = $baseTime->copy()->addHours($i);
            $isAvailable = !DB::table('appointments')
                ->where('date', $checkTime->format('Y-m-d'))
                ->where('time', $checkTime->format('H:i'))
                ->when($specialist, function ($query, $specialist) {
                    return $query->where('specialist_id', $specialist);
                })
                ->exists();
                
            if ($isAvailable) {
                $slots[] = [
                    'date' => $checkTime->format('Y-m-d'),
                    'time' => $checkTime->format('H:i'),
                    'available' => true
                ];
            }
            
            if (count($slots) >= 3) break;
        }
        
        return $slots;
    }
    
    private function getEstimatedWaitTime($priority, $department): string
    {
        $baseTime = match($department) {
            'sales' => 5,
            'support' => 10,
            'technical' => 15,
            default => 10
        };
        
        $multiplier = match($priority) {
            'high' => 0.5,
            'normal' => 1,
            'low' => 2,
            default => 1
        };
        
        $minutes = round($baseTime * $multiplier);
        
        return $minutes < 60 
            ? "{$minutes} –º–∏–Ω—É—Ç" 
            : round($minutes / 60) . " —á–∞—Å.";
    }
    
    private function extractProblemKeywords(string $text): array
    {
        $problemWords = [
            '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—Å–ª–æ–º–∞–ª—Å—è', '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', 
            '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≤–æ–∑–≤—Ä–∞—Ç', '–æ–±–º–∞–Ω', '–º–æ—à–µ–Ω–Ω–∏–∫–∏',
            '–¥–æ–ª–≥–æ', '–∑–∞–¥–µ—Ä–∂–∫–∞', '–ø–æ—Ç–µ—Ä—è–ª—Å—è', '–∏—Å–ø–æ—Ä—á–µ–Ω'
        ];
        
        $found = [];
        foreach ($problemWords as $word) {
            if (mb_stripos($text, $word) !== false) {
                $found[] = $word;
            }
        }
        
        return $found;
    }
    
    private function suggestActions($sentiment, $keywords): array
    {
        $actions = [];
        
        if ($sentiment['score'] < -0.5) {
            $actions[] = '–°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É';
            $actions[] = '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é';
        }
        
        if (in_array('–≤–æ–∑–≤—Ä–∞—Ç', $keywords)) {
            $actions[] = '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞';
        }
        
        if (in_array('–∑–∞–¥–µ—Ä–∂–∫–∞', $keywords) || in_array('–¥–æ–ª–≥–æ', $keywords)) {
            $actions[] = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å';
            $actions[] = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏';
        }
        
        return $actions;
    }
}